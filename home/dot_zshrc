#!/usr/bin/env zsh
#
# Copyright 2006-2024 Joseph Block <jpb@unixorn.net>
#
# BSD licensed, see LICENSE.txt
#
# Set this to use case-sensitive completion
# CASE_SENSITIVE="true"
#
# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"
#
# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"
#
# Version 1.0.0
#
# If you want to change settings that are in this file, the easiest way
# to do it is by adding a file to ~/.zshrc.d or ~/.zshrc.pre-plugins.d that
# redefines the settings.
#
# All files in there will be sourced, and keeping your customizations
# there will keep you from having to maintain a separate fork of the
# quickstart kit.
if [[ -f ~/.zrc-zprof-enabled ]]; then
    zmodload zsh/zprof
fi

# Check if a command exists
function can_haz() {
    which "$@" > /dev/null 2>&1
}

function zrc-debug() {
    if [[ -f ~/.zrc-debug-mode ]]; then
        echo $@
    fi
}

# Fix weirdness with intellij
if [[ -z "${INTELLIJ_ENVIRONMENT_READER}" ]]; then
    export POWERLEVEL9K_INSTANT_PROMPT='quiet'
fi

(( ${+commands[direnv]} )) && emulate zsh -c "$(direnv export zsh)"

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

(( ${+commands[direnv]} )) && emulate zsh -c "$(direnv hook zsh)"

# Valid font modes:
# flat, awesome-patched, awesome-fontconfig, nerdfont-complete, nerdfont-fontconfig
if [[ -r ~/.powerlevel9k_font_mode ]]; then
    POWERLEVEL9K_MODE=$(head -1 ~/.powerlevel9k_font_mode)
fi

# Unset COMPLETION_WAITING_DOTS in a file in ~/.zshrc.d if you want red dots to be displayed while waiting for completion
export COMPLETION_WAITING_DOTS="true"

# _zrc-* functions are internal tooling for the quickstart. Modifying or unsetting
# them is likely to break things badly.

_zrc-trigger-init-rebuild() {
    rm -f ~/.zgen/init.zsh
    rm -f ~/.zgenom/init.zsh
}

# We need to load shell fragment files often enough to make it a function
function load-shell-fragments() {
    if [[ -z $1 ]]; then
        echo "You must give load-shell-fragments a directory path"
    else
        if [[ -d "$1" ]]; then
            if [ -n "$(/bin/ls -A $1)" ]; then
                for _zrc_fragment in $(/bin/ls -A $1)
                do
                    if [ -r $1/$_zrc_fragment ]; then
                        source $1/$_zrc_fragment
                    fi
                done
                unset _zrc_fragment
            fi
        else
            echo "$1 is not a directory"
        fi
    fi
}

# Correct spelling for commands
setopt correct

# turn off the infernal correctall for filenames
unsetopt correctall

# Base PATH
PATH="$PATH:/sbin:/usr/sbin:/bin:/usr/bin"

# If you need to add extra directories to $PATH that are not checked for
# here, add a file in ~/.zshrc.d - then you won't have to maintain a
# fork of the kit.

# Conditional PATH additions
for path_candidate in /Applications/Xcode.app/Contents/Developer/usr/bin \
    /opt/homebrew/bin \
    /opt/homebrew/sbin \
    /home/linuxbrew/.linuxbrew/bin \
    /home/linuxbrew/.linuxbrew/sbin \
    /opt/local/bin \
    /opt/local/sbin \
    /usr/local/bin \
    /usr/local/sbin \
    ~/.cabal/bin \
    ~/.cargo/bin \
    ~/.linuxbrew/bin \
    ~/.linuxbrew/sbin \
    ~/.rbenv/bin \
    ~/bin \
    ~/.local/bin \
    ~/src/gocode/bin \
    ~/gocode
do
    if [[ -d "${path_candidate}" ]]; then
        path+=("${path_candidate}")
    fi
done
export PATH

# We will dedupe $PATH after loading ~/.zshrc.d/* so that any duplicates
# added there get deduped too.

# Deal with brew if it's installed. Note - brew can be installed outside
# of /usr/local, so use brew --prefix to find its bin and sbin directories.
if can_haz brew; then
    BREW_PREFIX=$(brew --prefix)
    if [[ -d "${BREW_PREFIX}/bin" ]]; then
        export PATH="$PATH:${BREW_PREFIX}/bin"
    fi
    if [[ -d "${BREW_PREFIX}/sbin" ]]; then
        export PATH="$PATH:${BREW_PREFIX}/sbin"
    fi
fi

# Yes, these are a pain to customize. Fortunately, Geoff Greer made an online
# tool that makes it easy to customize your color scheme and keep them in sync
# across Linux and OS X/*BSD at http://geoff.greer.fm/lscolors/

if [[ -z "$LSCOLORS" ]]; then
    export LSCOLORS='Exfxcxdxbxegedabagacad'
fi
if [[ -z "$LS_COLORS" ]]; then
    export LS_COLORS='di=1;34:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=0;41:sg=0;46:tw=0;42:ow=0;43:'
fi

load-our-ssh-keys() {
    # If keychain is installed let it take care of ssh-agent, else do it manually
    if can_haz keychain; then
        eval `keychain -q --eval`
    else
        if [ -z "$SSH_AUTH_SOCK" ]; then
            # If user has keychain installed, let it take care of ssh-agent, else do it manually
            # Check for a currently running instance of the agent
            RUNNING_AGENT="$(ps -ax | grep 'ssh-agent -s' | grep -v grep | wc -l | tr -d '[:space:]')"
            if [ "$RUNNING_AGENT" = "0" ]; then
                if [ ! -d ~/.ssh ] ; then
                    mkdir -p ~/.ssh
                fi
                # Launch a new instance of the agent
                ssh-agent -s &> ~/.ssh/ssh-agent
            fi
            eval $(cat ~/.ssh/ssh-agent)
        fi
    fi

    local key_manager=ssh-add

    if can_haz keychain; then
        key_manager=keychain
    fi

    # Fun with SSH
    if [ $($key_manager -l | grep -c "The agent has no identities." ) -eq 1 ]; then
        if [[ "$(uname -s)" == "Darwin" ]]; then
            # macOS allows us to store ssh key pass phrases in the keychain, so try
            # to load ssh keys using pass phrases stored in the macOS keychain.
            #
            # You can use ssh-add -K /path/to/key to store pass phrases into
            # the macOS keychain

            # macOS Monterey deprecates the -K and -A flags. They have been replaced
            # by the --apple-use-keychain and --apple-load-keychain flags.

            # check if Monterey or higher
            # https://scriptingosx.com/2020/09/macos-version-big-sur-update/
            if [[ $(sw_vers -productVersion | cut -d '.' -f 1) -ge "12" ]]; then
                # Load all ssh keys that have pass phrases stored in macOS keychain using new flags
                ssh-add --apple-load-keychain
            else
                ssh-add -qA
            fi
        fi

        for key in $(find ~/.ssh -type f -a \( -name '*id_rsa' -o -name '*id_dsa' -o -name '*id_ecdsa' -o -name '*id_ed25519' \))
        do
            if [ -f ${key} -a $(ssh-add -l | grep -F -c "$(ssh-keygen -l -f $key | awk '{print $2}')" ) -eq 0 ]; then
                $key_manager -q ${key}
            fi
        done
    fi
}

if [[ -z "$SSH_CLIENT" ]] || can_haz keychain; then
    load-our-ssh-keys
fi

# Load helper functions before we load zgenom setup
if [ -r ~/.zsh_functions ]; then
    source ~/.zsh_functions
fi

# Make it easy to prepend your own customizations that override
# the quickstart kit's defaults by loading all files from the
# ~/.zshrc.pre-plugins.d directory
mkdir -p ~/.zshrc.pre-plugins.d
load-shell-fragments ~/.zshrc.pre-plugins.d

if [[ -d "$HOME/.zshrc.pre-plugins.$(uname).d" ]]; then
    load-shell-fragments "$HOME/.zshrc.pre-plugins.$(uname).d"
fi

# macOS doesn't have a python by default. This makes the omz python and
# zsh-completion-generator plugins sad, so if there isn't a python, alias
# it to python3
if ! can_haz python; then
    if can_haz python3; then
        alias python=python3
    fi
    # Ugly hack for zsh-completion-generator - but only do it if the user
    # hasn't already set GENCOMPL_PY
    if [[ -z "$GENCOMPL_PY" ]]; then
        export GENCOMPL_PY='python3'
        export ZSH_COMPLETION_HACK='true'
    fi
fi

# Now that we have $PATH set up and ssh keys loaded, configure zgenom.
# Start zgenom
if [ -f ~/.zgen-setup ]; then
    source ~/.zgen-setup
fi

# Undo the hackery for issue 180
# Don't unset GENCOMPL_PY if we didn't set it
if [[ -n "$ZSH_COMPLETION_HACK" ]]; then
    unset GENCOMPL_PY
    unset ZSH_COMPLETION_HACK
fi

# Set some history options
#
# You can customize these by putting a file in ~/.zshrc.d with
# different settings - those files are loaded later specifically to
# make overriding these (and things set by plugins) easy without having
# to maintain a fork.
setopt append_history
setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_all_dups
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_reduce_blanks
setopt hist_save_no_dups
setopt hist_verify
setopt INC_APPEND_HISTORY
unsetopt HIST_BEEP

# Share your history across all your terminal windows
setopt share_history
#setopt noclobber

# Keep a ton of history. You can override these without editing .zshrc by
# adding a file to ~/.zshrc.d that changes these variables.
export HISTSIZE=100000
export SAVEHIST=100000
HISTFILE=~/.zsh_history

# ZSH Man page referencing the history_ignore parameter - https://manpages.ubuntu.com/manpages/kinetic/en/man1/zshparam.1.html
HISTORY_IGNORE="(cd ..|l[s]#( *)#|pwd *|exit *|date *|* --help)"

# Set some options about directories
setopt pushd_ignore_dups
#setopt pushd_silent
setopt AUTO_CD  # If a command is issued that canâ€™t be executed as a normal command,
                # and the command is the name of a directory, perform the cd command
                # to that directory.

# Add some completions settings
setopt ALWAYS_TO_END     # Move cursor to the end of a completed word.
setopt AUTO_LIST         # Automatically list choices on ambiguous completion.
setopt AUTO_MENU         # Show completion menu on a successive tab press.
setopt AUTO_PARAM_SLASH  # If completed parameter is a directory, add a trailing slash.
setopt COMPLETE_IN_WORD  # Complete from both ends of a word.
unsetopt MENU_COMPLETE   # Do not autoselect the first completion entry.

# Miscellaneous settings
setopt INTERACTIVE_COMMENTS  # Enable comments in interactive shell.

setopt extended_glob # Enable more powerful glob features

# How often to check for an update. If you want to override this, the
# easiest way is to add a script fragment in ~/.zshrc.d that unsets
# DOTFILE_REFRESH_IN_DAYS.
DOTFILE_REFRESH_IN_DAYS=7

# Disable Oh-My-ZSH's internal updating. Let it get updated when user
# does a zgenom update. Closes #62.
DISABLE_AUTO_UPDATE=true

# Expand aliases inline - see http://blog.patshead.com/2012/11/automatically-expaning-zsh-global-aliases---simplified.html
globalias() {
    if [[ $LBUFFER =~ ' [A-Z0-9]+$' ]]; then
        zle _expand_alias
        zle expand-word
    fi
    zle self-insert
}

zle -N globalias

bindkey " " globalias
bindkey "^ " magic-space           # control-space to bypass completion
bindkey -M isearch " " magic-space # normal space during searches

# Stuff that works on bash or zsh
if [ -r ~/.sh_aliases ]; then
    source ~/.sh_aliases
fi

# Stuff only tested on zsh, or explicitly zsh-specific
if [ -r ~/.zsh_aliases ]; then
    source ~/.zsh_aliases
fi

export LOCATE_PATH=/var/db/locate.database

# Load AWS credentials when present
if [ -f ~/.aws/aws_variables ]; then
    source ~/.aws/aws_variables
fi

# JAVA setup - needed for iam-* tools
if [ -d /Library/Java/Home ];then
    export JAVA_HOME=/Library/Java/Home
fi

if [[ "$(uname -s)" == "Darwin" ]]; then
    # Load macOS-specific aliases
    # Apple renamed the OS, so use the macos one first
    [ -r ~/.macos_aliases ] && source ~/.macos_aliases
    if [ -d ~/.macos_aliases.d ]; then
        load-shell-fragments ~/.macos_aliases.d
    fi
fi

# deal with screen, if we're using it - courtesy MacOSXHints.com
# Login greeting ------------------
if [ "$TERM" = "screen" -a ! "$SHOWED_SCREEN_MESSAGE" = "true" ]; then
    detached_screens=$(screen -list | grep Detached)
    if [ ! -z "$detached_screens" ]; then
        echo "+---------------------------------------+"
        echo "| Detached screens are available:       |"
        echo "$detached_screens"
        echo "+---------------------------------------+"
    fi
fi

# These need to be done after $PATH is set up so we can find
# eza

# When present, use exa or eza (newest) instead of ls
if can_haz eza; then
    ls_analog='eza'
fi

if [ -v ls_analog ]; then
    alias l="$ls_analog -al --icons --git --time-style=long-iso --group-directories-first --color-scale"
    alias ls="$ls_analog --group-directories-first"

    # Don't step on system-installed tree command
    if ! can_haz tree; then
        if [[ -z "$TREE_IGNORE" ]]; then
                TREE_IGNORE=".cache|cache|node_modules|vendor|.git"
        fi
        alias tree="$ls_analog --tree --ignore-glob='$TREE_IGNORE'"
    fi
    unset ls_analog
fi

# Speed up autocomplete, force prefix mapping
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache
zstyle -e ':completion:*:default' list-colors 'reply=("${PREFIX:+=(#bi)($PREFIX:t)*==34=34}:${(s.:.)LS_COLORS}")';

# Load any custom zsh completions we've installed
if [[ -d ~/.zsh-completions.d ]]; then
    load-shell-fragments ~/.zsh-completions.d
fi

# Load zmv
autoload -U zmv

# Make it easy to append your own customizations that override the
# quickstart's defaults by loading all files from the ~/.zshrc.d directory
mkdir -p ~/.zshrc.d
load-shell-fragments ~/.zshrc.d

if [[ -d "$HOME/.zshrc.$(uname).d" ]]; then
    load-shell-fragments "$HOME/.zshrc.$(uname).d"
fi

# Load work-specific fragments when present
if [[ -d "$HOME/.zshrc.work.d" ]]; then
    load-shell-fragments "$HOME/.zshrc.work.d"
fi

# If GOPATH is defined, add it to $PATH
if [[ -n "$GOPATH" ]]; then
    if [[ -d "$GOPATH" ]]; then
        export PATH="$PATH:$GOPATH"
    fi
fi

# Now that .zshrc.d has been processed, we dedupe $PATH using a ZSH builtin
# https://til.hashrocket.com/posts/7evpdebn7g-remove-duplicates-in-zsh-path
typeset -aU path;

# If desk is installed, load the Hook for desk activation
[[ -n "$DESK_ENV" ]] && source "$DESK_ENV"

# Do selfupdate checking. We do this after processing ~/.zshrc.d to make the
# refresh check interval easier to customize.
#
# If they unset DOTFILE_REFRESH_IN_DAYS in one of the fragments
# in ~/.zshrc.d, then we don't do any selfupdate checking at all.

_load-lastupdate-from-file() {
    local now=$(date +%s)
    if [[ -f "${1}" ]]; then
        local last_update=$(cat "${1}")
    else
        local last_update=0
    fi
    local interval=$(( ${now} - ${last_update} ))
    echo "${interval}"
}

_update-zrc() {
        local updates=$(chezmoi git fetch -- --porcelain)
        if [[ -n "$updates" ]]; then
                echo "There are updates available for your dotfiles."
                echo "Running 'chezmoi update' to apply them."
                chezmoi update
        else
                echo "No updates available for your dotfiles."
        fi
        date +%s >! ~/.zrc-last-update
}

_check-for-zrc-update() {
    local day_seconds=$(( 24 * 60 * 60))
    local refresh_seconds=$((${day_seconds} * ${DOTFILE_REFRESH_IN_DAYS}))
    local last_dotfiles_update=$(_load-lastupdate-from-file ~/.zrc-last-update)

    if [[ ${last_dotfiles_update} -gt ${refresh_seconds} ]]; then
        echo "It has been $(( ${last_dotfiles_update} / ${day_seconds})) days since your dotfiles were updated"
        echo "Checking for dotfiles updates..."
        _update-zrc
    fi
}

if [[ ! -z "$DOTFILE_REFRESH_IN_DAYS" ]]; then
    _check-for-zrc-update
    unset DOTFILE_REFRESH_IN_DAYS
fi

# Fix bracketed paste issue
# Closes #73
ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(bracketed-paste)

# Load iTerm shell integrations if found.
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# To customize your prompt, run `p10k configure` or edit ~/.p10k.zsh.
if [[ ! -f ~/.p10k.zsh ]]; then
    echo "Run p10k configure or edit ~/.p10k.zsh to configure your prompt"
else
    source ~/.p10k.zsh
fi

# Original source: https://vinipsmaker.wordpress.com/2014/02/23/my-zsh-config/
# bash prints ^C when you're typing a command and control-c to cancel, so it
# is easy to see it wasn't executed. By default, ZSH doesn't print the ^C.
# We trap SIGINT to make it print the ^C.
TRAPINT() {
    print -n -u2 '^C'
    return $((128+$1))
}

if ! can_haz fzf; then
    echo "$?"
    echo "You'll need to install fzf or your history search will be broken."
    echo
    echo
    echo "Install instructions can be found at https://github.com/junegunn/fzf/"
fi

function zrc-help() {
    echo "The zrc command allows you to manipulate your ZSH dotfiles."
    echo
    echo "Zshrc action commands:"
    echo "zrc check-for-updates - Update the dotfiles if it has been longer than $DOTFILE_REFRESH_IN_DAYS days since the last update."
    echo "zrc selfupdate - Force an immediate update of the dotfiles"
    echo "zrc update - Update dotfiles and plugins"
    echo "zrc update-plugins - Update your plugins"
    echo "zrc cleanup - Cleanup unused plugins after removing them from the list"
    echo ""
    echo "Zshrc settings commands:"

    echo "zrc disable-debug-mode - Turn off debug mode. This will stop printing debug messages during zsh startup."
    echo "zrc enable-debug-mode - Turn on debug mode. This will print debug messages during zsh startup."

    echo "zrc disable-zmv-autoloading - Set the zsh profile to not run 'autoload -U zmv'. Useful if you're using another plugin to handle it."
    echo "zrc enable-zmv-autoloading - Set the zsh profile to run 'autoload -U zmv'. This is the default behavior."
}

function zrc() {
    case "$1" in
        'check-for-updates')
            _check-for-zrc-update
            ;;

        # Internal commands
        'cleanup')
            zgenom clean
            ;;

        'selfupdate')
            _update-zrc
            ;;

        'update')
            _update-zrc
            zgenom update
            ;;

        'update-plugins')
            zgenom update
            ;;

        # Set/Unset settings

        'disable-debug-mode')
            rm -f ~/.zrc-debug-mode
            ;;
        'enable-debug-mode')
            date > ~/.zrc-debug-mode
            ;;

        # Profiling checks happen before the settings code is loaded, so we
        # touch the actual file instead of reading via _zrc-get-setting
        'disable-zsh-profiling')
            rm -f ~/.zrc-zprof-enabled
            echo "New ZSH sessions will no longer use profiling."
            ;;
        'enable-zsh-profiling')
            touch ~/.zrc-zprof-enabled
            echo "New ZSH sessions will use profiling."
            ;;
        *)
            zrc-help
            ;;

    esac
}

if [[ -f ~/.zrc-zprof-enabled ]]; then
    zprof
fi

